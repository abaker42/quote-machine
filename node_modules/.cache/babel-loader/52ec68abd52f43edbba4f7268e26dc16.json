{"ast":null,"code":"var _jsxFileName = \"C:\\\\WorkSpace\\\\React\\\\quote-machine\\\\src\\\\components\\\\quotes\\\\QuoteList.js\",\n  _s = $RefreshSig$();\nimport { Fragment } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport QuoteDetails from '../../pages/QuoteDetails';\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sortQuotes = (quotes, ascending) => {\n  return quotes.sort((quoteA, quoteB) => {\n    if (ascending) {\n      return quoteA.author > quoteB.author ? 1 : -1;\n    } else {\n      return quoteA.author < quoteB.author ? 1 : -1;\n    }\n  });\n};\nconst QuoteList = props => {\n  _s();\n  const history = useNavigate(); //useHistory is deprecated in reacr router dom\n  const location = useLocation();\n  const queryParams = new URLSearchParams(location.search);\n  const sortAscending = queryParams.get('sort') === 'asc';\n  const sortedQuotes = sortQuotes(props.quotes, sortAscending);\n  const handleSorting = () => {\n    history('/quotes?sort=' + (sortAscending ? 'desc' : 'asc'));\n  };\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.sorting,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSorting,\n        children: [\"Sort \", sortAscending ? 'Descending' : 'Ascending']\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: classes.list,\n      children: sortedQuotes.map(quote => /*#__PURE__*/_jsxDEV(QuoteItem, {\n        id: quote.id,\n        author: quote.author,\n        text: quote.text\n      }, quote.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 3\n  }, this);\n};\n_s(QuoteList, \"or5bqKy2MB4cZfeg+8SrDwtYsN8=\", false, function () {\n  return [useNavigate, useLocation];\n});\n_c = QuoteList;\nexport default QuoteList;\nvar _c;\n$RefreshReg$(_c, \"QuoteList\");","map":{"version":3,"names":["Fragment","useLocation","useNavigate","QuoteDetails","QuoteItem","classes","sortQuotes","quotes","ascending","sort","quoteA","quoteB","author","QuoteList","props","history","location","queryParams","URLSearchParams","search","sortAscending","get","sortedQuotes","handleSorting","sorting","list","map","quote","id","text"],"sources":["C:/WorkSpace/React/quote-machine/src/components/quotes/QuoteList.js"],"sourcesContent":["import { Fragment } from 'react';\nimport { useLocation, useNavigate } from 'react-router-dom';\nimport QuoteDetails from '../../pages/QuoteDetails';\n\nimport QuoteItem from './QuoteItem';\nimport classes from './QuoteList.module.css';\n\nconst sortQuotes = (quotes, ascending) => {\n\treturn quotes.sort((quoteA, quoteB) => {\n\t\tif (ascending) {\n\t\t\treturn quoteA.author > quoteB.author ? 1 : -1;\n\t\t} else {\n\t\t\treturn quoteA.author < quoteB.author ? 1 : -1;\n\t\t}\n\t});\n};\n\nconst QuoteList = (props) => {\n\tconst history = useNavigate(); //useHistory is deprecated in reacr router dom\n\tconst location = useLocation();\n\tconst queryParams = new URLSearchParams(location.search);\n\tconst sortAscending = queryParams.get('sort') === 'asc';\n\tconst sortedQuotes = sortQuotes(props.quotes, sortAscending);\n\n\tconst handleSorting = () => {\n\t\thistory('/quotes?sort=' + (sortAscending ? 'desc' : 'asc'));\n\t};\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className={classes.sorting}>\n\t\t\t\t<button onClick={handleSorting}>\n\t\t\t\t\tSort {sortAscending ? 'Descending' : 'Ascending'}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<ul className={classes.list}>\n\t\t\t\t{sortedQuotes.map((quote) => (\n\t\t\t\t\t<QuoteItem\n\t\t\t\t\t\tkey={quote.id}\n\t\t\t\t\t\tid={quote.id}\n\t\t\t\t\t\tauthor={quote.author}\n\t\t\t\t\t\ttext={quote.text}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</Fragment>\n\t);\n};\n\nexport default QuoteList;\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,WAAW,EAAEC,WAAW,QAAQ,kBAAkB;AAC3D,OAAOC,YAAY,MAAM,0BAA0B;AAEnD,OAAOC,SAAS,MAAM,aAAa;AACnC,OAAOC,OAAO,MAAM,wBAAwB;AAAC;AAE7C,MAAMC,UAAU,GAAG,CAACC,MAAM,EAAEC,SAAS,KAAK;EACzC,OAAOD,MAAM,CAACE,IAAI,CAAC,CAACC,MAAM,EAAEC,MAAM,KAAK;IACtC,IAAIH,SAAS,EAAE;MACd,OAAOE,MAAM,CAACE,MAAM,GAAGD,MAAM,CAACC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9C,CAAC,MAAM;MACN,OAAOF,MAAM,CAACE,MAAM,GAAGD,MAAM,CAACC,MAAM,GAAG,CAAC,GAAG,CAAC,CAAC;IAC9C;EACD,CAAC,CAAC;AACH,CAAC;AAED,MAAMC,SAAS,GAAIC,KAAK,IAAK;EAAA;EAC5B,MAAMC,OAAO,GAAGb,WAAW,EAAE,CAAC,CAAC;EAC/B,MAAMc,QAAQ,GAAGf,WAAW,EAAE;EAC9B,MAAMgB,WAAW,GAAG,IAAIC,eAAe,CAACF,QAAQ,CAACG,MAAM,CAAC;EACxD,MAAMC,aAAa,GAAGH,WAAW,CAACI,GAAG,CAAC,MAAM,CAAC,KAAK,KAAK;EACvD,MAAMC,YAAY,GAAGhB,UAAU,CAACQ,KAAK,CAACP,MAAM,EAAEa,aAAa,CAAC;EAE5D,MAAMG,aAAa,GAAG,MAAM;IAC3BR,OAAO,CAAC,eAAe,IAAIK,aAAa,GAAG,MAAM,GAAG,KAAK,CAAC,CAAC;EAC5D,CAAC;EACD,oBACC,QAAC,QAAQ;IAAA,wBACR;MAAK,SAAS,EAAEf,OAAO,CAACmB,OAAQ;MAAA,uBAC/B;QAAQ,OAAO,EAAED,aAAc;QAAA,oBACxBH,aAAa,GAAG,YAAY,GAAG,WAAW;MAAA;QAAA;QAAA;QAAA;MAAA;IACxC;MAAA;MAAA;MAAA;IAAA,QACJ,eACN;MAAI,SAAS,EAAEf,OAAO,CAACoB,IAAK;MAAA,UAC1BH,YAAY,CAACI,GAAG,CAAEC,KAAK,iBACvB,QAAC,SAAS;QAET,EAAE,EAAEA,KAAK,CAACC,EAAG;QACb,MAAM,EAAED,KAAK,CAACf,MAAO;QACrB,IAAI,EAAEe,KAAK,CAACE;MAAK,GAHZF,KAAK,CAACC,EAAE;QAAA;QAAA;QAAA;MAAA,QAKd;IAAC;MAAA;MAAA;MAAA;IAAA,QACE;EAAA;IAAA;IAAA;IAAA;EAAA,QACK;AAEb,CAAC;AAAC,GA7BIf,SAAS;EAAA,QACEX,WAAW,EACVD,WAAW;AAAA;AAAA,KAFvBY,SAAS;AA+Bf,eAAeA,SAAS;AAAC;AAAA"},"metadata":{},"sourceType":"module"}